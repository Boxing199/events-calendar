{"version":3,"sources":["components/Calendar/Calendar.js","actions/index.js","actions/actionTypes.js","containers/CalendarContainer.js","components/CalendarNav/CalendarNav.js","containers/CalendarNavContainer.js","App.js","containers/AppContainer.js","reducers/data.js","serviceWorker.js","index.js"],"names":["Calendar","today","this","props","currentMonth","currentYear","startCurrentMonth","Date","lastDate","getDate","currentMonthDays","emptyBlocks","i","getDay","push","date","day","react_default","a","createElement","id","className","map","block","index","key","monthDay","getMonth","getFullYear","React","Component","getNextMonth","type","getPrevMonth","getThisMonth","mapDispatchToProps","CalendarContainer","connect","state","CalendarNav","_this","onClick","CalendarNavContainer","App","toString","slice","containers_CalendarNavContainer","containers_CalendarContainer","AppContainer","initialState","data","arguments","length","undefined","Object","objectSpread","Boolean","window","location","hostname","match","configureStore","createStore","__webpack_require__","d","__webpack_exports__","src_store","store","ReactDOM","render","es","containers_AppContainer","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b34d099.chunk.js","sourcesContent":["import React from 'react';\n\nclass Calendar extends React.Component {\n  render() {\n    const today = this.props.today;\n    const currentMonth = this.props.currentMonth;\n    const currentYear = this.props.currentYear;\n    const startCurrentMonth = new Date(currentYear, currentMonth);\n    const endCurrentMonth = new Date(currentYear, currentMonth+1, 0);\n    const lastDate = endCurrentMonth.getDate();\n    const currentMonthDays = [];\n    const emptyBlocks = [];\n    for (let i = 1; i < getDay(startCurrentMonth); i++) {\n      emptyBlocks.push('');\n    };\n    for (let i = 1; i<=lastDate; i++) {\n      currentMonthDays.push(new Date(currentYear, currentMonth, i))\n    };\n    function getDay(date) {\n      let day = date.getDay();\n      if (day === 0) day = 7;\n        return day;\n    }\n  return (\n      <div id=\"calendar\">\n        <div className=\"weekDay\">пн</div>\n        <div className=\"weekDay\">вт</div>\n        <div className=\"weekDay\">ср</div>\n        <div className=\"weekDay\">чт</div>\n        <div className=\"weekDay\">пт</div>\n        <div className=\"weekDay\">сб</div>\n        <div className=\"weekDay\">вс</div>\n        {emptyBlocks.map((block, index)=>(\n          <div \n            className=\"empty\" \n            key={index}\n          >\n            {block}\n          </div>\n        ))}\n        {currentMonthDays.map((monthDay, index) => (\n          <div \n            key={index}\n            className={(monthDay.getDate() === today.getDate() && monthDay.getMonth() === today.getMonth() && monthDay.getFullYear() === today.getFullYear()) ? 'day currentDay' : 'day'}\n          >\n            <span \n              className={(monthDay.getDate() === today.getDate() && monthDay.getMonth() === today.getMonth() && monthDay.getFullYear() === today.getFullYear()) ? 'date currentDate' : 'date'}\n            >\n              {monthDay.getDate()}\n            </span>\n          </div>\n        ))}\n      </div>\n  );\n  }\n}\n\nexport default Calendar;","import * as type from './actionTypes';\n\nexport const getNextMonth = () => ({\n    type: type.NEXT_MONTH,\n});\n\nexport const getPrevMonth = () => ({\n    type: type.PREV_MONTH,\n});\n\nexport const getThisMonth = () => ({\n    type: type.THIS_MONTH,\n});","export const NEXT_MONTH = 'NEXT_MONTH';\nexport const PREV_MONTH = 'PREV_MONTH';\nexport const THIS_MONTH = 'THIS_MONTH';","import { connect } from 'react-redux';\nimport Calendar from '../components/Calendar/Calendar';\nimport { \n  getNextMonth,\n  getPrevMonth,\n  getThisMonth,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  today: state.today,\n  currentMonth: state.currentMonth,\n  currentYear: state.currentYear,\n});\nconst mapDispatchToProps = {\n  getNextMonth,\n  getPrevMonth,\n  getThisMonth,\n};\nexport const CalendarContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Calendar);\n\nexport default CalendarContainer;\n","import React from 'react';\n\nclass CalendarNav extends React.Component {\n  render() {\n    return (\n      <nav className=\"calendar-nav\">\n        <button className=\"calendar-nav-btn\" onClick={()=>(this.props.getPrevMonth())}>&#9668; prev</button>\n        <button className=\"calendar-nav-btn\" onClick={()=>(this.props.getThisMonth())}>&#8226; current month &#8226;</button>\n        <button className=\"calendar-nav-btn\" onClick={()=>(this.props.getNextMonth())}>next &#9658;</button>\n      </nav>\n    );\n  }\n}\n\nexport default CalendarNav;","import { connect } from 'react-redux';\nimport CalendarNav from '../components/CalendarNav/CalendarNav';\nimport { \n  getNextMonth,\n  getPrevMonth,\n  getThisMonth,\n} from '../actions/index';\nconst mapStateToProps = state => ({\n});\nconst mapDispatchToProps = {\n  getNextMonth,\n  getPrevMonth,\n  getThisMonth,\n};\nexport const CalendarNavContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(CalendarNav);\n\nexport default CalendarNavContainer;\n","import React from 'react';\nimport CalendarContainer from './containers/CalendarContainer';\nimport CalendarNavContainer from './containers/CalendarNavContainer'\n\nclass App extends React.Component {\n  render() {\n    const today = this.props.today.toString().slice(0,16);\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September','October', 'Novembe', 'December'];\n    return (\n      <div className=\"wrapper\">\n        <main className=\"main\">\n          <div className=\"content\">\n            <div className=\"inner\">\n              <h2 className=\"title\">{today}</h2>\n              <CalendarNavContainer />\n              <p className=\"subtitle\">{months[this.props.currentMonth]}</p>\n              <CalendarContainer />\n            </div>\n          </div>\n        </main>  \n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport App from '../App';\n\nconst mapStateToProps = state => ({\n  today: state.today,\n  currentMonth: state.currentMonth,\n});\n\nexport const AppContainer = connect(\n  mapStateToProps,\n)(App);\n\nexport default AppContainer;\n","import * as type from '../actions/actionTypes';\n\nexport const initialState = {\n  today: new Date(),\n  currentMonth: new Date().getMonth(),\n  currentYear: new Date().getFullYear(),\n};\nexport const data = (state = initialState, action) => {\n  switch (action.type) {\n    case type.NEXT_MONTH:\n      //return { ...state, currentMonth: state.currentMonth+1 };\n      if (state.currentMonth === 11) {\n        return { ...state, currentMonth: 0, currentYear: state.currentYear+1 };\n      }\n      return { ...state, currentMonth: state.currentMonth+1 };\n    case type.PREV_MONTH:\n        if (state.currentMonth === 0) {\n          return { ...state, currentMonth: 11, currentYear: state.currentYear-1 };\n        }\n      return { ...state, currentMonth: state.currentMonth-1 };\n    case type.THIS_MONTH:\n      return { ...state, currentMonth: state.today.getMonth(), currentYear: state.today.getFullYear() };  \n    default:\n      return state;\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport AppContainer from './containers/AppContainer';\nimport { createStore } from 'redux';\nimport { data } from './reducers/data';\nimport { initialState } from './reducers/data';\nimport * as serviceWorker from './serviceWorker';\n\nimport './styles/reset.css';\nimport './styles/normalize.css';\nimport './styles/index.css';\n\nexport function configureStore() {\n    const store = createStore(data, initialState);\n    return store;\n  }\nexport const store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <AppContainer />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}